set nocompatible " required
filetype off     " required

" Plugins
call plug#begin('~/.vim/plugged')

" Wrap
set nowrap
nnoremap <F4> :set wrap!<CR>

" Enable folded view by default
set foldmethod=syntax
set foldlevel=1
" Fold with the spacebar
nnoremap <space> za
" zm fold level
" zM fold all levels
" zr unfold level
" zR unfold all levels
let g:SimpylFold_docstring_preview = 1 " See the docstrings for folded code
Plug 'tmhedberg/SimpylFold'

Plug 'flazz/vim-colorschemes'
if &diff
    " Vimdiff highlight
    " hi DiffAdd cterm=none ctermfg=White ctermbg=Red gui=none guifg=White guibg=Red
    " hi DiffDelete cterm=none ctermfg=White ctermbg=Red gui=none guifg=White guibg=Red
    " hi DiffText cterm=none ctermfg=White ctermbg=Red gui=none guifg=White guibg=Red
    " " The diff line highlight
    " hi DiffChange cterm=none ctermfg=Black ctermbg=White gui=none guifg=Black guibg=White
    " " Vim highlight
    " hi Visual term=reverse cterm=reverse
    colorscheme tender
else
    colorscheme molokai
endif

let NERDTreeIgnore=['\.pyc$', '\~$'] " Ignore files in NERDTree
Plug 'scrooloose/nerdtree'

" Git
Plug 'mhinz/vim-signify'
nnoremap <LocalLeader>gV :Gvsplit<CR>
nnoremap <LocalLeader>gv :Gvdiffsplit!<CR>
" Take the left pane
nnoremap <LocalLeader>gvc :diffget //2<CR>
" Take the right pane
nnoremap <LocalLeader>gvb :diffget //3<CR>
Plug 'tpope/vim-fugitive'

" Status line
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif

" powerline symbols
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_symbols.branch = ''
let g:airline_symbols.readonly = ''
let g:airline_symbols.linenr = ''
let g:airline_symbols.maxlinenr = ''
let g:airline_symbols.dirty='⚡'
" git
let g:airline#extensions#hunks#enabled = 1
let g:airline#extensions#branch#enabled = 1
Plug 'vim-airline/vim-airline'

" Format
"" Python
autocmd FileType python noremap <buffer> <LocalLeader>= :call Autopep8()<CR>
let g:autopep8_diff_type='vertical'
let g:autopep8_max_line_length=180
Plug 'tell-k/vim-autopep8'
" autocmd FileType python noremap <buffer> <LocalLeader>b :Black<CR>
" Plug 'ambv/black'
"" JSON
autocmd FileType json noremap <buffer> <LocalLeader>= :%!python -c "import json, sys, collections; print(json.dumps(json.loads(sys.stdin.read(), object_pairs_hook=collections.OrderedDict), indent=2))"<CR>

" Default key mapping is <C-l>
let g:pydocstring_doq_path = '/usr/local/bin/doq'
Plug 'heavenshell/vim-pydocstring'

" Finding
" ripgrep
let g:ackprg = 'rg -s --no-heading --vimgrep'
Plug 'mileszs/ack.vim'
" fzf
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
map ; :Files<CR>

" Tag management
let g:autotagTagsFile = '/home/spindicator/.vim/tag/autotag'
Plug 'craigemery/vim-autotag'
Plug 'majutsushi/tagbar'
" ctags -R init on dir
" https://vim.fandom.com/wiki/Browsing_programs_with_tags
" gd search declaration
" gD search declaration global, from top
" c, gn, <enter name>, esc
" n, .
" Ctrl + ] jump tag declaration
" Ctrl + w, Ctrl + ] jump tag declaration in split
" Ctrl + t jump back
" # highlight occurrances up
" * highlight occurrances down

" gc in visual to toggle
Plug 'tomtom/tcomment_vim'

" Completion
" Plug 'codota/tabnine-vim'
" Plug 'neoclide/coc.nvim', {'branch': 'release'}

" " Completion Snips
" Plug 'SirVer/ultisnips'
" Plug 'honza/vim-snippets'
" let g:UltiSnipsExpandTrigger='<leader>ss'

let g:ycm_seed_identifiers_with_syntax = 0
let g:ycm_collect_identifiers_from_tags_files = 1
let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_goto_buffer_command='new-or-existing-tab'
nnoremap <F5> :YcmForceCompileAndDiagnostics<CR>
map <leader>gg :YcmCompleter GoToDefinitionElseDeclaration<CR>
map <leader>gr :YcmCompleter GoToReferences<CR>
" :cw to show fixes
map <leader>rr :YcmCompleter RefactorRename<Space>
Plug 'ycm-core/YouCompleteMe'
" Plug 'tabnine/YouCompleteMe'
" set completeopt=preview,menuone " default
" set completeopt=popup,menuone

" Checking
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

" sudo apt install flake8
" https://github.com/DmytroLitvinov/awesome-flake8-extensions
" pip install flake8-docstrings
" pip install flake8-todo
" sudo gem install mdl
" let g:syntastic_always_populate_loc_list = 1
let g:syntastic_python_checkers=['flake8', 'python3']
let g:syntastic_python_flake8_args = '--max-line-length 180'
let g:syntastic_json_checkers=['jsonlint']
" let g:syntastic_clojure_checkers=['clj-konto']
let g:syntastic_markdown_mdl_args = "-r '~MD013'" " ignore the line length warning
let g:syntastic_ruby_checkers=['rubocop']
let g:syntastic_auto_loc_list = 1
let g:syntastic_loc_list_height=5
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 1
" " virtualenv pylint hack
" py3 << EOF
" import os
" if 'VIRTUAL_ENV' in os.environ:
"   os.system('pip show pylint >/dev/null && if [ $? -eq 1 ]; then pip install pylint; fi')
" EOF
Plug 'vim-syntastic/syntastic'

" Python Virtualenv
Plug 'jmcantrell/vim-virtualenv'

" OpenSCAD
Plug 'sirtaj/vim-openscad'

" Syntax highlighting
Plug 'sheerun/vim-polyglot'

" Indent
Plug 'Vimjas/vim-python-pep8-indent'

" JSON
Plug 'elzr/vim-json'
" Disable fancy concealing of attribute quotes.
let g:vim_json_syntax_conceal = 0

" Markdown
" mdr downloadable from https://github.com/MichaelMure/mdr/releases/
let g:preview_markdown_auto_update = 1
Plug 'skanehira/preview-markdown.vim'

" Terraform
autocmd FileType terraform noremap <buffer> <LocalLeader>= :Terraform fmt<CR>
Plug 'hashivim/vim-terraform'
Plug 'juliosueiras/vim-terraform-completion'
let g:terraform_completion_keys = 1
let g:terraform_registry_module_completion = 0

" " Clojure
" Plug 'clojure-emacs/cider'
" Plug 'tpope/vim-fireplace'

" VCL
let g:vcl_fold = 1
Plug 'fgsch/vim-varnish'

" Initialize plugin system
call plug#end()

" General indent
set tabstop=2
set softtabstop=2
set shiftwidth=2
set expandtab
set autoindent

" Development file settings
" Python
au BufNewFile,BufRead *.py
    \ set tabstop=4 |
    \ set softtabstop=4 |
    \ set shiftwidth=4 |
    \ set textwidth=180 |
    \ set expandtab |
    \ set autoindent |
    \ set fileformat=unix |
" JavaScript
au BufNewFile,BufRead *.js
    \ set tabstop=4 |
    \ set softtabstop=4 |
    \ set shiftwidth=4 |
    \ set textwidth=180 |
    \ set expandtab |
    \ set autoindent |
    \ set fileformat=unix |
" TypeScript
au BufNewFile,BufRead *.ts
    \ set tabstop=4 |
    \ set softtabstop=4 |
    \ set shiftwidth=4 |
    \ set textwidth=180 |
    \ set expandtab |
    \ set autoindent |
    \ set fileformat=unix |
" Varnish Configuration Language
au BufNewFile,BufRead *.vcl
    \ set tabstop=2 |
    \ set softtabstop=2 |
    \ set shiftwidth=2 |
    \ set textwidth=180 |
    \ set expandtab |
    \ set autoindent |
    \ set fileformat=unix |

" Browser file settings
au BufNewFile,BufRead *.html
    \ set tabstop=2 |
    \ set softtabstop=2 |
    \ set shiftwidth=2 |
    \ set textwidth=180 |
    \ set expandtab |
    \ set autoindent |
    \ set fileformat=unix |
au BufNewFile,BufRead *.css
    \ set tabstop=2 |
    \ set softtabstop=2 |
    \ set shiftwidth=2 |
    \ set textwidth=180 |
    \ set expandtab |
    \ set autoindent |
    \ set fileformat=unix |

" JSON file settings
au BufNewFile,BufRead *.json
    \ set tabstop=2 |
    \ set softtabstop=2 |
    \ set shiftwidth=2 |
    \ set filetype=json |
    \ set textwidth=180 |
    \ set expandtab |
    \ set autoindent |
    \ set fileformat=unix |

" UTF-8 support
set encoding=utf-8

" Syntax
let python_highlight_all=1
syntax on

" Line numbers
" set nu

" Highlight search
" * search on word
set hlsearch

" System clipboard
set clipboard=unnamed

" Status Bar in single window. 0=never, 1=only with two windows, 2=always
set laststatus=2

" Be able to write the crontab
autocmd FileType crontab setlocal bkc=yes

" Mouse
set mouse=a
" set mouse=v " Mac
set mousefocus

" Enable the cursorline
set cursorline
hi CursorLine ctermbg=234
" https://upload.wikimedia.org/wikipedia/commons/1/15/Xterm_256color_chart.svg

" Parenthesis
hi MatchParen cterm=none ctermbg=green ctermfg=black

" NERDTree
map <F7> :NERDTreeToggle<CR>

" Tagbar
map <F8> :TagbarToggle<CR>

" Recursive search
nnoremap \\ :Ack<space>

" Tabs
nmap <C-h> :tabnew<CR>
nmap <C-l> :tabclose<CR>
nmap <C-j> :tabnext<CR>
nmap <C-k> :tabprevious<CR>

" Spelling
autocmd BufReadPost,BufNewFile *.md,*.txt set spell spelllang=en_gb

" Keyword help
" K
autocmd BufNewFile,BufRead *.py set keywordprg=pydoc3

" Bell
set belloff=all

" Whitespace removal
autocmd BufWritePre *.js :%s/\s\+$//e
autocmd BufWritePre *.json :%s/\s\+$//e
autocmd BufWritePre *.md :%s/\s\+$//e
autocmd BufWritePre *.py :%s/\s\+$//e
autocmd BufWritePre *.tf :%s/\s\+$//e
autocmd BufWritePre *.ts :%s/\s\+$//e

" Clipboard
" Yanking in the WSL
let s:clip = '/mnt/c/Windows/system32/clip.exe'
if executable(s:clip)
    augroup WSLYank
        autocmd!
        autocmd TextYankPost * call system('echo '.shellescape(join(v:event.regcontents, "\<CR>")).' | '.s:clip)
    augroup END
end

" Navigation
" ``      = ping pong
"
" [[      = previous def / class
" ]]      = next def / class
"
" Shift+[ = previous paragraph
" Shift+] = next paragraph

" Folds
" zm increases foldlevel by one
" zM closes all open folds
" zr decreases foldlevel by one
" zR opens all closed folds

" Highlight
" * highlight and go to next occurrance of word cursor is on
" # highlight and go to previous occurrance of word cursor is on
" Allow use of shift and arrow for highlight
set keymodel=startsel

" Spelling
" set spell spelllang=en_gb
" [s ]s move between misspellings
" z= to get alternatives
" zg to add word to personal dictionary

" Debug Pdb
" \r = run
" \b = breakpoint
" next
" step
" continue

" Terminal
" :ter

" Fuzzy file search
" ;

" Colour overrides
" Generally making things a little darker
hi Normal ctermbg=232
hi SignColumn ctermbg=233
hi CursorLine ctermbg=233 
