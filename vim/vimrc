set nocompatible " required
filetype off     " required

" Plugins
call plug#begin('~/.vim/plugged')

let g:SimpylFold_docstring_preview = 1 " See the docstrings for folded code
Plug 'tmhedberg/SimpylFold'
Plug 'flazz/vim-colorschemes'
let NERDTreeIgnore=['\.pyc$', '\~$'] " Ignore files in NERDTree
Plug 'scrooloose/nerdtree'
let g:airline#extensions#ale#enabled = 1
Plug 'vim-airline/vim-airline'
Plug 'airblade/vim-gitgutter'
let g:autopep8_diff_type='vertical'
let g:autopep8_max_line_length=180
Plug 'tell-k/vim-autopep8'
Plug 'heavenshell/vim-pydocstring' " Default key mapping is <C-l>
let g:ackprg = 'rg -s --no-heading --vimgrep'
Plug 'mileszs/ack.vim'
Plug 'fatih/vim-go'
Plug 'nsf/gocode', {'rtp': 'vim/'}
" Plug 'chrisbra/csv.vim'
Plug 'majutsushi/tagbar'
let g:pymode_python = 'python3'
let g:pymode_lint_on_fly = 1
let g:pymode_lint_ignore = ["E501",]
let g:pymode_indent = 1
let g:pymode_rope = 1
let g:pymode_rope_autoimport = 1
set completeopt=menuone,noinsert,noselect " preview if doc needed
let g:pymode_rope_completion = 1
let g:pymode_rope_complete_on_dot = 0
Plug 'python-mode/python-mode', { 'for': 'python', 'branch': 'develop' }
Plug 'ervandew/supertab'
Plug 'jreybert/vimagit' " :Magit
Plug 'vim-scripts/AutoComplPop' " auto popup completion
Plug 'tomtom/tcomment_vim' " gc in visual to toggle
"Plug 'puremourning/vimspector'

let g:clang_library_path='/usr/local/opt/llvm/lib'
Plug 'xavierd/clang_complete'
"
" Unite file or Unite buffer
Plug 'Shougo/vimproc.vim', {'do' : 'make'}
Plug 'Shougo/unite.vim'

" OpenSCAD
Plug 'sirtaj/vim-openscad'

" Initialize plugin system
call plug#end()

" Enable folded view by default
set foldmethod=syntax
set foldlevel=1
" Fold with the spacebar
nnoremap <space> za
" zm fold level
" zM fold all levels
" zr unfold level
" zR unfold all levels

" General indent
set tabstop=2
set softtabstop=2
set shiftwidth=2
set expandtab
set autoindent

" Python indent
au BufNewFile,BufRead *.py
    \ set tabstop=4 |
    \ set softtabstop=4 |
    \ set shiftwidth=4 |
    \ set textwidth=180 |
    \ set expandtab |
    \ set autoindent |
    \ set fileformat=unix |

" Full stack indent
au BufNewFile,BufRead *.js, *.html, *.css
    \ set tabstop=2 |
    \ set softtabstop=2 |
    \ set shiftwidth=2 |

" UTF-8 support
set encoding=utf-8

" Syntax
let python_highlight_all=1
syntax on

" Line numbers
" set nu

" Highlight search
set hlsearch

" System clipboard
set clipboard=unnamed

" Colorscheme
colorscheme molokai

" Vimdiff highlight
hi DiffAdd cterm=none ctermfg=White ctermbg=Red gui=none guifg=White guibg=Red
hi DiffDelete cterm=none ctermfg=White ctermbg=Red gui=none guifg=White guibg=Red
hi DiffText cterm=none ctermfg=White ctermbg=Red gui=none guifg=White guibg=Red
" The diff line highlight
hi DiffChange cterm=none ctermfg=Black ctermbg=White gui=none guifg=Black guibg=White
" Vim highlight
hi Visual term=reverse cterm=reverse

" Status Bar in single window. 0=never, 1=only with two windows, 2=always
set laststatus=2

let g:syntastic_go_checkers = ['gometalinter']

" Be able to write the crontab
autocmd FileType crontab setlocal bkc=yes

" Use the mouse for highlighting and cursor
"set mouse=nv
set mouse=n

" Enable the cursorline
set cursorline

" Update ctags for use with :ta, gd, gD, Ctrl-], Ctrl-t and Ctrl-^
au BufWritePost *.py,*.go silent! !ctags -R --exclude=.git --exclude=venv --exclude='*.js' &

" NERDTree
nmap <F7> :NERDTreeToggle<CR>

" Tagbar
nmap <F8> :TagbarToggle<CR>

" Format
autocmd FileType python noremap <buffer> <LocalLeader>= :call Autopep8()<CR>
autocmd FileType json noremap <buffer> <LocalLeader>= :%!python -m json.tool<CR>

" Recursive search
" :cd ~/projects/yourproject
" :ack your-search-term
nnoremap \\ :Ack<space>

" tabs
nmap <C-j> :tabnext<CR>
nmap <C-k> :tabprevious<CR>
" Option j
nmap ∆ :tabnew<CR>
" Option k
nmap ˚ :tabclose<CR>

" https://github.com/garbas/vim-snipmate

" Colour of the parenthesis matching
hi! MatchParen cterm=NONE,bold gui=NONE,bold ctermbg=15 guibg=#fdf6e3 ctermfg=12 guifg=#839496

" Navigation
" ``      = ping pong
" C-c g   = goto def
" [[      = previous def / class
" ]]      = next def / class
" Shift+[ = previous paragraph
" Shift+] = next paragraph
" zm increases foldlevel by one
" zM closes all open folds
" zr decreases foldlevel by one
" zR opens all closed folds

" Pdb
" \r = run
" \b = breakpoint
" next
" step
" continue
