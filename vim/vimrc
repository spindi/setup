set nocompatible              " required
filetype off                  " required

" Plugins
call plug#begin('~/.vim/plugged')

let g:SimpylFold_docstring_preview = 1 " See the docstrings for folded code
Plug 'tmhedberg/SimpylFold'
"Plug 'vim-scripts/indentpython.vim'
Plug 'flazz/vim-colorschemes'
let NERDTreeIgnore=['\.pyc$', '\~$'] " Ignore files in NERDTree
Plug 'scrooloose/nerdtree'
let g:airline#extensions#ale#enabled = 1
Plug 'vim-airline/vim-airline'
Plug 'airblade/vim-gitgutter'
"Plug 'Chiel92/vim-autoformat'
Plug 'heavenshell/vim-pydocstring' " Default key mapping is <C-l>
let g:ackprg = 'rg -s --no-heading --vimgrep'
Plug 'mileszs/ack.vim'
Plug 'fatih/vim-go'
Plug 'nsf/gocode', {'rtp': 'vim/'}
Plug 'chrisbra/csv.vim'
Plug 'majutsushi/tagbar'
let g:pymode_python = 'python3'
let g:pymode_lint_on_fly = 1
let g:pymode_lint_ignore = ["E501",]
let g:pymode_indent = 1
let g:pymode_rope = 1
let g:pymode_rope_autoimport = 1
set completeopt=menuone,noinsert
"set completeopt=menuone,longest,noinsert
"set completeopt=menuone,noinsert,noselect,preview
let g:pymode_rope_completion = 1
let g:pymode_rope_complete_on_dot = 1
Plug 'python-mode/python-mode', { 'for': 'python', 'branch': 'develop' }
Plug 'ervandew/supertab'
Plug 'jreybert/vimagit' " :Magit
Plug 'vim-scripts/AutoComplPop' " auto popup completion

" Initialize plugin system
call plug#end()

" Enable folding
set foldmethod=indent
set foldlevel=99

" Enable folding with the spacebar
nnoremap <space> za

" General indent
set tabstop=2
set softtabstop=2
set shiftwidth=2
set expandtab
set autoindent

" Python indent
au BufNewFile,BufRead *.py
    \ set tabstop=4 |
    \ set softtabstop=4 |
    \ set shiftwidth=4 |
    \ set textwidth=180 |
    \ set expandtab |
    \ set autoindent |
    \ set fileformat=unix |

" Full stack indent
au BufNewFile,BufRead *.js, *.html, *.css
    \ set tabstop=2 |
    \ set softtabstop=2 |
    \ set shiftwidth=2 |

" UTF-8 support
set encoding=utf-8

" Syntax
let python_highlight_all=1
syntax on

" Line numbers
" set nu

" Highlight search
set hlsearch

" System clipboard
set clipboard=unnamed

" Vimdiff highlight
highlight DiffAdd cterm=none ctermfg=White ctermbg=Red gui=none guifg=White guibg=Red
highlight DiffDelete cterm=none ctermfg=White ctermbg=Red gui=none guifg=White guibg=Red
highlight DiffText cterm=none ctermfg=White ctermbg=Red gui=none guifg=White guibg=Red
" The diff line highlight
highlight DiffChange cterm=none ctermfg=Black ctermbg=White gui=none guifg=Black guibg=White

" Colorscheme
colorscheme molokai

" Status Bar in single window. 0=never, 1=only with two windows, 2=always
set laststatus=2

let g:syntastic_go_checkers = ['gometalinter']

" Be able to write the crontab
autocmd FileType crontab setlocal bkc=yes

" Use the mouse for highlighting and cursor
"set mouse=nv
set mouse=n

" Enable the cursorline
set cursorline

" Update ctags for use with :ta, gd, gD, Ctrl-], Ctrl-t and Ctrl-^
au BufWritePost *.py,*.go silent! !ctags -R --exclude=.git --exclude=venv --exclude='*.js' &

" NERDTree
nmap <F7> :NERDTreeToggle<CR>

" Tagbar
nmap <F8> :TagbarToggle<CR>

" Format
nnoremap <LocalLeader>= :Autoformat<CR>

" Recursive search
" :cd ~/projects/yourproject
" :ack your-search-term
nnoremap \\ :ack<space>

" tabs
nmap <C-j> :tabnext<CR>
nmap ∆ :tabnew<CR>
nmap <C-k> :tabprevious<CR>
nmap ˚ :tabclose<CR>

" https://github.com/garbas/vim-snipmate
